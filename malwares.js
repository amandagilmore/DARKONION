// Malwares -> Threat Reports page script (safe, non-actionable)

// Config
const ITEMS_PER_PAGE = 10;
let currentPage = 1;
let allItems = [];

// Elements
const grid = document.getElementById('grid');
const pagination = document.getElementById('pagination');
const searchInput = document.getElementById('searchInput');
const typeFilter = document.getElementById('typeFilter');
const modal = document.getElementById('modal');
const modalTitle = document.getElementById('modalTitle');
const modalBody = document.getElementById('modalBody');
const modalTopUp = document.getElementById('modalTopUp');
const modalClose = document.getElementById('modalClose');

function formatCurrency(n){ return `$${Number(n).toFixed(2)}`; }
function genOrderId(){ return 'ORD-' + Math.random().toString(16).slice(2,10); }

// Load items from JSON
async function loadItems(){
  try{
    const res = await fetch('malwares.json');
    allItems = await res.json();
    render();
    setupPagination();
  }catch(err){
    console.error('Failed to load items', err);
    grid.innerHTML = '<div style="padding:18px">Failed to load items.</div>';
  }
}

function render(filtered = null){
  const list = filtered || allItems;
  grid.innerHTML = '';
  const start = (currentPage-1)*ITEMS_PER_PAGE;
  const pageItems = list.slice(start, start + ITEMS_PER_PAGE);

  if(pageItems.length === 0){
    grid.innerHTML = '<div style="padding:18px;text-align:center;color:#94a3b8">No results</div>';
    return;
  }

  pageItems.forEach(item => {
    const row = document.createElement('div');
    row.className = 'row';
    row.innerHTML = `
      <div class="col-report"><strong>${escapeHtml(item.name)}</strong><br><small style="color:var(--muted)">${escapeHtml(item.id)}</small></div>
      <div class="col-type">${escapeHtml(item.type)}</div>
      <div class="col-desc">${escapeHtml(item.description)}</div>
      <div class="col-sev">${severityLabel(item.severity)}</div>
      <div class="col-price">${formatCurrency(item.price)}<br>${item.fresh ? '<span class="badge-fresh">Fresh</span>' : ''}</div>
      <div class="col-buy"><button class="btn btn-primary buy-btn" data-id="${item.id}" data-price="${item.price}">Buy</button></div>
    `;
    grid.appendChild(row);
  });

  // wire buttons
  document.querySelectorAll('.buy-btn').forEach(btn => {
    btn.addEventListener('click', onBuyClicked);
  });
}

function severityLabel(s){
  if(!s) return '';
  const sl = s.toLowerCase();
  if(sl==='low') return `<span class="severity-low">Low</span>`;
  if(sl==='medium') return `<span class="severity-med">Medium</span>`;
  if(sl==='high') return `<span class="severity-high">High</span>`;
  return escapeHtml(s);
}

function setupPagination(filtered = null){
  const list = filtered || allItems;
  const total = Math.ceil(list.length / ITEMS_PER_PAGE) || 1;
  pagination.innerHTML = '';
  for(let i=1;i<=total;i++){
    const b = document.createElement('button');
    b.textContent = i;
    if(i===currentPage) b.classList.add('active');
    b.addEventListener('click', ()=> {
      currentPage = i;
      render(filtered);
      setupPagination(filtered);
      window.scrollTo({top:0,behavior:'smooth'});
    });
    pagination.appendChild(b);
  }
}

// search & filter
searchInput.addEventListener('input', ()=>{
  currentPage = 1;
  applyFilters();
});
typeFilter.addEventListener('change', ()=>{
  currentPage = 1;
  applyFilters();
});

function applyFilters(){
  const q = (searchInput.value || '').trim().toLowerCase();
  const t = (typeFilter.value || '').trim().toLowerCase();
  const filtered = allItems.filter(it => {
    const matchesQ = !q || (it.name && it.name.toLowerCase().includes(q)) || (it.type && it.type.toLowerCase().includes(q)) || (it.id && it.id.includes(q));
    const matchesT = !t || (it.type && it.type.toLowerCase() === t);
    return matchesQ && matchesT;
  });
  render(filtered);
  setupPagination(filtered);
}

// --- Buy logic using localStorage wallet & purchases ---
function onBuyClicked(e){
  const btn = e.currentTarget;
  const price = Number(btn.dataset.price || 0);
  const id = btn.dataset.id;
  const balance = Number(localStorage.getItem('balance') || 0);

  if(balance < price){
    // show modal telling required topup amount
    const need = (price - balance).toFixed(2);
    modalTitle.textContent = 'Top Up Required';
    modalBody.innerHTML = `You need to top up <strong>${formatCurrency(need)}</strong> to purchase this report.<br><br>We will redirect you to Top Up page.`;
    showModal();
    modalTopUp.onclick = ()=> {
      window.location.href = 'topup.html';
    };
    return;
  }

  // Sufficient balance: deduct, save purchase and redirect to purchases page
  const newBalance = (balance - price).toFixed(2);
  localStorage.setItem('balance', newBalance);

  // Save purchase
  const purchases = JSON.parse(localStorage.getItem('purchases') || '[]');
  const item = allItems.find(it => it.id === id) || { name: id };
  const order = {
    orderId: genOrderId(),
    title: item.name || id,
    price: Number(price),
    status: 'Pending',
    paymentMethod: 'Wallet',
    orderDate: new Date().toISOString(),
    note: '⏳ Processing: Your order is being reviewed. You will be notified once approved.'
  };
  purchases.unshift(order);
  localStorage.setItem('purchases', JSON.stringify(purchases));

  // update balance display on other pages (if they read from localStorage)
  //alert(`Purchase recorded: ${item.name}\nOrder ${order.orderId}\nPrice: ${formatCurrency(price)}\nRedirecting to purchases page...`);
  // short delay to allow alert to show
  setTimeout(()=> window.location.href = 'purchases.html', 600);
}

// modal helpers
function showModal(){ modal.classList.add('show'); modal.setAttribute('aria-hidden','false'); }
function hideModal(){ modal.classList.remove('show'); modal.setAttribute('aria-hidden','true'); }
modalClose.addEventListener('click', hideModal);
modal.addEventListener('click', (ev) => { if(ev.target === modal) hideModal(); });

// simple HTML escape to be safe
function escapeHtml(s){
  if(!s) return '';
  return String(s).replace(/[&<>"']/g, function(m){ return ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]); });
}

// startup
window.addEventListener('DOMContentLoaded', ()=> {
  loadItems();

  // when balance changes outside, pages relying on it will read from localStorage.
  // ensure modal buttons exist
  modalTopUp.addEventListener('click', ()=> { window.location.href = 'topup.html'; });
});
